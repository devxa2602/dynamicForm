{"version":3,"sources":["Input.js","utility.js","UserForm.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","updateObject","oldObject","updatedProperties","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","UserForm","state","userForm","mobile","type","placeholder","validation","valid","email","formIsValid","userHandler","event","preventDefault","formData","formElementIdentifier","console","log","alert","formChangeHandler","inputIdentifier","updatedUserElement","target","updateduserForm","setState","formElementsArray","this","id","config","form","onSubmit","formElement","disabled","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bc1ea0b.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from'./Input.css'\r\nconst input =(props)=>{\r\n\tlet inputElement=null;\r\n\tconst inputClasses=[classes.InputElement]\r\n\tif(props.invalid && props.shouldValidate && props.touched){\r\n\t\tinputClasses.push(classes.Invalid);\r\n\t}\r\n\tswitch(props.elementType){\r\n\t\t\tcase('input'):\r\n\t\t\tinputElement=<input \r\n\t\t\tclassName={inputClasses.join(' ')}\r\n\t\t\t{...props.elementConfig}\r\n\t\t\tvalue={props.value} onChange={props.changed}/>\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase('textarea'):\r\n\t\t\tinputElement=<textarea \r\n\t\t\tclassName={inputClasses.join(' ')}\r\n\t\t\t{...props.elementConfig}\r\n\t\t\tvalue={props.value} onChange={props.changed}/>\r\n\t\t\t\tbreak;\r\n\t\t\tcase('select'):\r\n\t\t\tinputElement=(\r\n\t\t\t\t<select\r\n\t\t\t\t\tclassName={inputClasses.join(' ')}\r\n\t\t\t\t\tvalue={props.value} onChange={props.changed}>\r\n\t\t\t\t\t{props.elementConfig.options.map(option=>(\r\n\t\t\t\t\t\t<option key={option.value} value={option.value}>\r\n\t\t\t\t\t\t\t{option.displayValue}\r\n\t\t\t\t\t\t</option>))}\r\n\t\t\t\t</select>\r\n\t\t)\r\n\t\t\t\tbreak;\r\n\t\tdefault:inputElement=<input className={inputClasses.join(' ')} \r\n\t\t\t{...props.elementConfig}\r\n\t\t\tvalue={props.value}\r\n\t\t\t onChange={props.changed}\r\n\t\t\t/>\r\n\t}\r\n\treturn(\r\n\t<div className={classes.Input}>\r\n\t\t<label className={classes.Label}>{props.label}</label>\r\n\t\t\t{inputElement}\r\n\t</div>\r\n\t\r\n\t)\r\n}\r\n\r\nexport default input;","export const updateObject =(oldObject,updatedProperties)=>{\r\n\treturn{\r\n\t\t...oldObject,\r\n\t\t...updatedProperties\r\n\t}\r\n}\r\n\r\n export const checkValidity = ( value, rules ) =>{\r\n        let isValid = true;\r\n        if ( !rules ) {\r\n            return true;\r\n        }\r\n        if ( rules.required ) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n        if ( rules.minLength ) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if ( rules.maxLength ) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n        if ( rules.isEmail ) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test( value ) && isValid\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n","import React, { Component } from 'react'\r\nimport Input from './Input'\r\nimport {updateObject,checkValidity} from './utility'\r\nexport class UserForm extends Component {\r\n    state={\r\n\t\tuserForm:{\r\n\t\t\tmobile:{ \r\n\t\t\telementType:'input',\r\n\t\t\telementConfig:{\r\n\t\t\ttype:'text',\r\n\t\t\tplaceholder:'Mobile Number'\r\n\t         },value:'',\r\n\t\t\t\tvalidation:{\r\n\t\t\t\t\trequired:true,\r\n\t\t\t\t\tminLength:10,\r\n\t\t\t\t\tmaxLength:10\r\n\t\t\t\t},valid:false,\r\n\t\t\t\ttouched:false\r\n           },\r\n\t\t\temail:{ \r\n\t\t\telementType:'input',\r\n\t\t\telementConfig:{\r\n\t\t\ttype:'text',\r\n\t\t\tplaceholder:'Your E-Mail'\r\n\t         },value:'',\r\n\t\t\t\tvalidation:{\r\n                    required:true,\r\n                    isEmail:true\r\n\t\t\t\t},valid:false,\r\n\t\t\t\ttouched:false\r\n           },\r\n\t},\r\n\t\t\r\n\t\tformIsValid:false\r\n\t}\r\n\r\n\r\nuserHandler=(event)=>{\r\n\tevent.preventDefault();\r\n\tconst formData={};\r\n\tfor (let formElementIdentifier in this.state.userForm){\r\n\t\tformData[formElementIdentifier]=this.state.userForm[formElementIdentifier].value\r\n\t\t//email=test@test.com\r\n\t}\r\n    console.log(formData)\r\n    alert(`The email is :${formData.email}. The mobile no is :${formData.mobile}`)\r\n}\r\n\r\nformChangeHandler=(event,inputIdentifier)=>{\r\n\t\r\n    let updatedUserElement=updateObject(this.state.userForm[inputIdentifier],\r\n        {\r\n\t\tvalue:event.target.value,\r\n        valid:checkValidity(event.target.value,this.state.userForm[inputIdentifier].validation),\r\n\t\ttouched:true\r\n\t\t\t})\r\n\tlet updateduserForm=updateObject(this.state.userForm,{[inputIdentifier]:updatedUserElement})\r\n\t\r\n\r\n\tlet formIsValid=true;\r\n\tfor(let inputIdentifier in updateduserForm){\r\n\t\tformIsValid=updateduserForm[inputIdentifier].valid && formIsValid\r\n\t}\r\n\tthis.setState({userForm:updateduserForm,formIsValid:formIsValid})\r\n}\r\n\r\n\r\nrender(){\r\n\tconst formElementsArray=[]\r\n\tfor(let key in this.state.userForm){\r\n\t\tformElementsArray.push({\r\n\t\t\tid:key,\r\n\t\t\tconfig:this.state.userForm[key]\r\n\t\t})\r\n\t}\r\n\tlet form=(<form onSubmit={this.userHandler}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{formElementsArray.map(formElement=>(\r\n\t\t\t<Input \r\n\t\t\t\tkey={formElement.id}\r\n\t\t\t\telementType={formElement.config.elementType}\r\n\t\t\t\telementConfig={formElement.config.elementConfig}\r\n\t\t\t\tvalue={formElement.config.value}\r\n\t\t\t\tinvalid={!formElement.config.valid}\r\n\t\t\t\tshouldValidate={formElement.config.validation}\r\n\t\t\t\ttouched={formElement.config.touched}\r\n\t\t\t\tchanged={(event)=>this.formChangeHandler(event,formElement.id)}\r\n\t\t\t\t\r\n\t\t\t\t/>))}\r\n\t\t\t\t<button  disabled={!this.state.formIsValid}>SUBMIT</button>\r\n\t\t\t</form>);\r\n\treturn (\r\n\t<div >\r\n\t\t<h4>Enter your Contact Data</h4>\r\n\t\t\t{form}\r\n\t\t</div>)}\r\n}\r\n\r\nexport default UserForm\r\n","import React from 'react';\n\nimport './App.css';\nimport UserForm from './UserForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}